# ==============================================================================
# Docker Compose - Borgmatic API with Docker Socket Proxy (Secured)
# ==============================================================================
# Ce fichier montre les deux configurations possibles :
# 1. Avec Docker Socket Proxy (RECOMMANDÉ pour production)
# 2. Sans Docker Socket Proxy (accès direct au socket - développement uniquement)
#
# Usage:
#   cp docker-compose.example.yml docker-compose.yml
#   cp .env.example .env
#   # Éditer .env avec vos valeurs
#   docker-compose up -d
# ==============================================================================

# ==============================================================================
# RÉSEAUX
# ==============================================================================
networks:
  # Réseau externe partagé avec Node-RED et Nextcloud AIO
  nodered_borgmatic_nextcloud:
    external: true
  
  # Réseau interne pour le Socket Proxy (pas d'accès Internet)
  # ⚠️ Décommenter si vous utilisez le Socket Proxy
  socket-proxy:
    driver: bridge
    internal: true

# ==============================================================================
# SERVICES
# ==============================================================================
services:
  # ============================================================================
  # DOCKER SOCKET PROXY - Couche de sécurité (RECOMMANDÉ)
  # ============================================================================

  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: docker-socket-proxy
    hostname: docker-socket-proxy
    restart: unless-stopped

    networks:
      - socket-proxy

    volumes:
      # Socket Docker monté en LECTURE SEULE
      - /var/run/docker.sock:/var/run/docker.sock:ro

    environment:
      # Permissions minimales pour les besoins de l'API
      CONTAINERS: 1
      EXEC: 1
      VOLUMES: 1
      INFO: 1
      VERSION: 1

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:2375/version"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # ============================================================================
  # BORGMATIC API - Application principale
  # ============================================================================
  borgmatic-api:
    image: ghcr.io/quentinreytinas/borgmatic-api-nextcloud-aio:latest
    container_name: borgmatic-api
    hostname: borgmatic-api
    restart: unless-stopped
    
    depends_on:
      docker-socket-proxy:
        condition: service_healthy

    networks:
      - nodered_borgmatic_nextcloud  # Communication avec Node-RED
      - socket-proxy                  # Communication avec le proxy sécurisé
    
    environment:
      # ========================================================================
      # SÉCURITÉ - AUTHENTIFICATION (OBLIGATOIRE)
      # ========================================================================
      # Token d'écriture pour opérations sensibles (backup, restore, etc.)
      # Générer avec: openssl rand -base64 32
      API_TOKEN: "${BORG_API_TOKEN:?ERREUR: BORG_API_TOKEN requis dans .env}"
      
      # Token de lecture pour opérations read-only (status, info, logs)
      # Si non défini, utilise BORG_API_TOKEN
      API_READ_TOKEN: "${BORG_API_READ_TOKEN:?ERREUR: BORG_API_READ_TOKEN requis dans .env}"
      
      # Header personnalisé pour identification du client (Node-RED)
      APP_FROM_HEADER: "${APP_FROM_HEADER:?ERREUR: APP_FROM_HEADER requis dans .env}"
      
      # ========================================================================
      # FLASK / GUNICORN
      # ========================================================================
      API_BIND: "0.0.0.0"
      API_PORT: "5000"
      API_WORKERS: "2"
      API_THREADS: "4"
      API_TIMEOUT: "300"
      API_KEEPALIVE: "75"
      API_LOGLEVEL: "info"
      
      # ========================================================================
      # BORGMATIC / BORG
      # ========================================================================
      BORGMATIC_CONFIG_DIR: "/etc/borgmatic.d"
      BORG_BASE_DIR: "/var/lib/borg"
      BORG_SSH_DIR: "/root/.ssh"
      
      # ========================================================================
      # NEXTCLOUD AIO INTEGRATION
      # ========================================================================
      AIO_MASTER: "nextcloud-aio-mastercontainer"
      AIO_DAILY: "/daily-backup.sh"
      AIO_HEALTH: "/healthcheck.sh"
      
      # ========================================================================
      # SERVER-SENT EVENTS (SSE) & WEBHOOKS
      # ========================================================================
      APP_SSE_HEARTBEAT_SEC: "15"
      APP_SSE_BASE_URL: "http://borgmatic-api:5000"
      APP_READY_WEBHOOK_URL: "http://nodered:1880/webhooks/borgmatic/ready"
      
      # ========================================================================
      # DOCKER SOCKET PROXY CONFIGURATION
      # ========================================================================
      # Supprimer cette variable si vous utilisez le socket Docker local en développement
      DOCKER_HOST: "tcp://docker-socket-proxy:2375"
      
      # ========================================================================
      # SYSTÈME
      # ========================================================================
      TZ: "Europe/Paris"
    
    # ==========================================================================
    # DEVICES & CAPABILITIES
    # ==========================================================================
    devices:
      # Nécessaire pour borgmatic mount (FUSE)
      - "/dev/fuse:/dev/fuse"
    
    cap_add:
      # Nécessaire pour borgmatic mount (FUSE)
      - SYS_ADMIN
    
    cap_drop:
      # Retirer toutes les autres capabilities
      - ALL
    
    security_opt:
      - no-new-privileges:true
    
    # ==========================================================================
    # VOLUMES
    # ==========================================================================
    volumes:
      # === Configs borgmatic (lecture seule) ===
      - ./configs:/etc/borgmatic.d:ro
      
      # === Volumes Nextcloud AIO (lecture seule) ===
      - nextcloud_aio_mastercontainer:/nextcloud_aio_volumes/nextcloud_aio_mastercontainer:ro
      - nextcloud_aio_nextcloud:/nextcloud_aio_volumes/nextcloud_aio_nextcloud:ro
      - nextcloud_aio_nextcloud:/nextcloud_aio_volumes/nextcloud_aio_nextcloud_data:ro
      - nextcloud_aio_database:/nextcloud_aio_volumes/nextcloud_aio_database:ro
      - nextcloud_aio_database_dump:/nextcloud_aio_volumes/nextcloud_aio_database_dump:ro
      - nextcloud_aio_redis:/nextcloud_aio_volumes/nextcloud_aio_redis:ro
      - nextcloud_aio_apache:/nextcloud_aio_volumes/nextcloud_aio_apache:ro
      
      # === Cache & SSH (persistants) ===
      - cache:/root/.cache/borg
      - ssh:/root/.ssh
      
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.stop-signal=SIGTERM"
      - "com.centurylinklabs.watchtower.stop-timeout=300s"

    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/health', timeout=3)"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  # Volumes Nextcloud AIO (externes, créés par AIO)
  nextcloud_aio_mastercontainer:
    external: true
  nextcloud_aio_nextcloud:
    external: true
  nextcloud_aio_nextcloud:
    external: true
  nextcloud_aio_database:
    external: true
  nextcloud_aio_database_dump:
    external: true
  nextcloud_aio_redis:
    external: true
  nextcloud_aio_apache:
    external: true
  
  # Volumes locaux (gérés par ce compose)
  cache:
    driver: local
  ssh:
    driver: local

# ==============================================================================
# NOTES DE CONFIGURATION
# ==============================================================================
# 
# CONFIGURATION RECOMMANDÉE POUR PRODUCTION:
# 
# 1. Docker Socket Proxy (activé par défaut):
#    - Laisser le service docker-socket-proxy démarré
#    - Conserver le réseau 'socket-proxy' dans borgmatic-api.networks
#    - Garder DOCKER_HOST pointant vers tcp://docker-socket-proxy:2375
#    - Ne pas monter /var/run/docker.sock dans borgmatic-api (inutile en mode proxy)
#
#    Mode développement (socket direct):
#      * Commenter le service docker-socket-proxy et le réseau socket-proxy
#      * Supprimer la variable DOCKER_HOST du service borgmatic-api
#      * (Optionnel) Monter /var/run/docker.sock dans borgmatic-api si nécessaire
# 
# 2. Configurer les variables d'environnement:
#    - Copier .env.example vers .env
#    - Générer des tokens sécurisés
#    - Définir APP_FROM_HEADER
# 
# 3. Préparer les configs borgmatic:
#    - Créer le dossier ./configs
#    - Ajouter vos fichiers .yaml de configuration borgmatic
# 
# 4. Vérifier la sécurité:
#    - Lancer: docker-compose up -d
#    - Vérifier les logs: docker logs borgmatic-api | grep "Security Configuration"
#    - Tester: curl http://localhost:5000/security/exec-whitelist
# 
# NIVEAUX DE SÉCURITÉ:
# 
# Niveau 1 (DEV UNIQUEMENT): Accès direct au socket
#   Protection: ~40% - Socket en lecture seule uniquement
#   Risque: docker exec permet toujours beaucoup de choses
# 
# Niveau 2 (PRODUCTION): Socket Proxy + Whitelist Exec
#   Protection: ~85% - Limite drastique des commandes possibles
#   Risque: Les scripts whitelistés peuvent avoir des vulnérabilités
# 
# Niveau 3 (PARANOID): Niveau 2 + AppArmor + Falco + Vault
#   Protection: ~95% - Défense en profondeur complète
#   Risque: Minimal, exploitation très difficile
# 
# ==============================================================================
